---
import { getCollection } from "astro:content";
import FancyPostPreview from "./FancyPostPreview.astro";
import type { CollectionEntry } from "astro:content";
import Tags from "./Tags.astro";
import * as Astro from "astro";

const {
	numbered = false,
	large = false,
	collection,
	filter = () => true,
	sort = (a, b) => a.id.localeCompare(b.id),
	reverse = false,
	Subtitle,
} = Astro.props;

let heros = [];

try {
	heros =
		collection == "project"
			? Object.values(import.meta.glob("/src/content/project/*/hero.astro", { eager: true }))
			: collection === "thesis"
				? Object.values(import.meta.glob("/src/content/thesis/*/hero.astro", { eager: true }))
				: collection === "teaching"
					? Object.values(import.meta.glob("/src/content/teaching/*/hero.astro", { eager: true }))
					: collection === "research"
						? Object.values(import.meta.glob("/src/content/research/*/hero.astro", { eager: true }))
						: [];
} catch (error) {
	console.log("No heros for collection", collection);
}

const heroMapping = heros.reduce((acc, hero) => {
	const match = hero.file.match(/\/([^/]+)\/hero\.astro/);
	if (match) {
		const id = match[1].replace(".", "");
		acc[id] = hero;
	}
	return acc;
}, {});

let right = false;

const allPosts = (
	(await getCollection(collection, filter)) as CollectionEntry<
		"project" | "thesis" | "teaching" | "research"
	>[]
)
	.sort(sort)
	.map((post, i) => {
		const returnPost = { ...post, number: i + 1 };
		if (post.id in heroMapping) {
			returnPost.hero = heroMapping[post.id];
		}
		if (returnPost.data.heroImage || returnPost.hero) {
			right = !right;
			returnPost.right = right;
		} else {
			returnPost.right = false;
		}
		return returnPost;
	});

if (reverse) allPosts.reverse();
---

<ul class="not-prose space-y-8">
	{
		allPosts.map((post) => (
			<li class="flex flex-col flex-wrap gap-2 sm:flex-row [&_q]:basis-full">
				<FancyPostPreview
					right={post.right}
					{...(post.hero ? { Hero: post.hero } : {})}
					{...(post.data.heroImage ? { heroImage: post.data.heroImage } : {})}
					{...(post.data.heroImageHover ? { heroImageHover: post.data.heroImageHover } : {})}
					large={large}
					url={`/${collection}/${post.id}`}
				>
					<div slot="title">
						<h2 class="mb-1 text-xl font-bold">
							{numbered && `${post.number}. `}
							<a href={`/${collection}/${post.id}`} class="text-accent">
								{post.data.title}
							</a>
						</h2>
						{Subtitle && <Subtitle {...post.data} />}
					</div>
					<p class="text-md" slot="description">
						{post.data.description}
					</p>
					<Tags tags={post.data.tags} slot="tags" />
				</FancyPostPreview>
			</li>
		))
	}
</ul>

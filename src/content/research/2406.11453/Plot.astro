---
const { args, id, class: className } = Astro.props;

import { plot } from "./plot.ts";
import { JSDOM } from "jsdom";

const jsdom = new JSDOM("");
global.window = jsdom.window as unknown as Window & typeof globalThis;
global.document = jsdom.window.document;
global.Event = jsdom.window.Event;
global.Node = jsdom.window.Node;
global.NodeList = jsdom.window.NodeList;
global.HTMLCollection = jsdom.window.HTMLCollection;

const chart = plot(args);
---

<plot-chart data-args={JSON.stringify(args)} {...id !== undefined && { id }}>
	<div class:list={[className]} set:html={chart.outerHTML} />
</plot-chart>

<script>
	import { plot, type Args } from "./plot.ts";

	function debounce<Params extends unknown[]>(
		func: (...args: Params) => unknown,
		timeout: number,
	): (...args: Params) => void {
		let timer: ReturnType<typeof setTimeout> | null = null;
		return (...args: Params) => {
			if (timer !== null) clearTimeout(timer);
			timer = setTimeout(() => {
				func(...args);
			}, timeout);
		};
	}

	class PlotChart extends HTMLElement {
		args: Args & { width: number; height: number };
		div: HTMLDivElement;
		constructor() {
			super();
			this.div = this.querySelector("div")!;
			this.args = JSON.parse(this.dataset.args!);
			const ro = new ResizeObserver(
				debounce((entries: ResizeObserverEntry[]) => {
					if (entries.length === 0) return;
					else {
						const entry: ResizeObserverEntry = entries[0]!;
						this.args.width = entry.contentRect.width;
						this.args.height = entry.contentRect.height;
						this.plot();
					}
				}, 50),
			);
			ro.observe(this.div);
			this.addEventListener("plot", (event) => {
				if (event instanceof CustomEvent) {
					this.args = { ...this.args, ...event.detail };
					this.plot();
				}
			});
		}

		plot = () => {
			const plt = plot(this.args);
			this.div.innerHTML = "";
			this.div.append(plt);
		};
	}
	customElements.define("plot-chart", PlotChart);
</script>
